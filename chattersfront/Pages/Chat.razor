@page "/chat"
@inject ChatService ChatService
@inject AuthenticationStateProvider AuthStateProvider
@inject CustomAuthenticationStateProvider CustomAuthStateProvider
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@using chattersfront.Models
@using System.Security.Claims
@using System.Threading.Tasks

<h3>Czat Pracowniczy</h3>

@if (!isAuthenticated)
{
    <p>Nie jesteś zalogowany. <a href="/login">Zaloguj się</a>.</p>
}
else
{
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div style="color: red;">@errorMessage</div>
    }

    <div style="margin-bottom: 10px;">
        <p>Witaj, <b>@userName</b>! (ID: @userId, Org: @organizationId, Project: @projectId)</p>
        <button @onclick="HandleLogout">Wyloguj</button>
    </div>

    <div style="border: 1px solid #ccc; padding: 10px; height: 300px; overflow-y: scroll; margin-bottom: 10px;">
        @foreach (var message in messages)
        {
            <div style="margin-bottom: 5px;">
                <b>@message.SenderName</b> (@message.Timestamp.ToShortTimeString()): @message.MessageText
                @if (!string.IsNullOrEmpty(message.FileUrl))
                {
                    <p><a href="@message.FileUrl" target="_blank">Załączony plik</a></p>
                }
            </div>
        }
    </div>

    <input type="text" @bind="newMessage" placeholder="Napisz wiadomość..." style="width: 80%; padding: 5px;" />
    <button @onclick="SendMessage" style="padding: 5px 10px;">Wyślij</button><br />
    <input type="text" @bind="newChannelName" placeholder="Nazwa nowego kanału" style="width: 80%; padding: 5px; margin-top: 5px;" />
    <button @onclick="CreateNewChannel" style="padding: 5px 10px;">Stwórz Kanał</button>
}


@code {
    private bool isAuthenticated;
    private string userId = string.Empty;
    private string userName = string.Empty;
    private string organizationId = string.Empty;
    private string projectId = string.Empty;

    private List<Models.Message> messages = new List<Models.Message>(); // Używamy modelu z Models
    private string newMessage = string.Empty;
    private string newChannelName = string.Empty;
    private Guid currentChannelId = Guid.Empty; // Placeholder, w prawdziwej aplikacji lista kanałów i wybór

    private string errorMessage = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        ChatService.OnMessageReceived += HandleMessageReceived;
        ChatService.OnTypingIndicator += HandleTypingIndicator;
        ChatService.OnUserAddedToChannel += HandleUserAddedToChannel;
        ChatService.OnChannelCreatedSuccessfully += HandleChannelCreatedSuccessfully;
        ChatService.OnReceiveError += HandleReceiveError;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            userName = user.Identity?.Name ?? user.FindFirst("email")?.Value ?? "Nieznany Użytkownik"; // Lepiej użyć email jeśli Name jest puste
            organizationId = user.FindFirst("OrganizationId")?.Value ?? string.Empty;
            projectId = user.FindFirst("ProjectId")?.Value ?? string.Empty;

            // Spróbuj dołączyć do domyślnego kanału lub go stworzyć
            // W prawdziwej aplikacji powinieneś pobrać listę kanałów użytkownika i pozwolić mu wybrać
            // Na potrzeby demo stworzymy kanał, jeśli nie mamy ID
            if (Guid.TryParse(organizationId, out Guid orgId) && Guid.TryParse(projectId, out Guid projId))
            {
                // Założenie: Użytkownik zawsze ma dostęp do kanału projektowego
                // Na potrzeby demo użyjemy stałego ID dla kanału głównego projektu.
                // W bardziej rozbudowanej aplikacji: pobieranie kanałów z API /api/Channels,
                // do których użytkownik należy, i umożliwienie wyboru.
                currentChannelId = new Guid("A0000000-0000-0000-0000-000000000001"); // Przykładowe stałe ID kanału

                // Tutaj mogłaby być logika, która sprawdza, czy kanał o nazwie "Projekt <Nazwa_Projektu>" już istnieje
                // i jeśli nie, to go tworzy.
                // Na przykład, wywołanie API do backendu:
                // var channels = await ChannelService.GetChannels(orgId, projId);
                // var projectChannel = channels.FirstOrDefault(c => c.Name == $"Projekt {projectId}");
                // if (projectChannel == null) { await ChatService.CreateChannel($"Projekt {projectId}", "project", projId); }
                // else { currentChannelId = projectChannel.Id; }

            }
            else
            {
                errorMessage = "Brak ID organizacji lub projektu w tokenie.";
            }

            await ChatService.StartConnectionAsync();
        }
    }

    private void HandleMessageReceived(Models.Message message) // Używamy modelu z Models
    {
        messages.Add(message);
        StateHasChanged(); // Odśwież UI
    }

    private void HandleTypingIndicator(string userId, string userName, Guid channelId)
    {
        // Tutaj logika wyświetlania wskaźnika pisania
        Console.WriteLine($"{userName} pisze w kanale {channelId}...");
        // Możesz dodać tymczasowy komunikat do UI, np. "Użytkownik X pisze..."
        // messages.Add(new Message { MessageText = $"{userName} pisze...", SenderName = "System", Timestamp = DateTime.Now });
        // StateHasChanged();
    }

    private void HandleUserAddedToChannel(Guid channelId, string userId, string userName)
    {
        Console.WriteLine($"Użytkownik {userName} (ID: {userId}) został dodany do kanału {channelId}.");
        messages.Add(new Models.Message { MessageText = $"{userName} dołączył do kanału.", SenderName = "System", Timestamp = DateTime.Now });
        StateHasChanged();
    }

    private void HandleChannelCreatedSuccessfully(Guid channelId, string channelName)
    {
        Console.WriteLine($"Kanał '{channelName}' (ID: {channelId}) został utworzony.");
        errorMessage = $"Kanał '{channelName}' został utworzony (ID: {channelId}).";
        // Po stworzeniu kanału, można by go ustawić jako aktualny kanał
        // currentChannelId = channelId;
        StateHasChanged();
    }

    private void HandleReceiveError(string error)
    {
        errorMessage = error;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (currentChannelId != Guid.Empty && !string.IsNullOrWhiteSpace(newMessage))
        {
            await ChatService.SendMessage(currentChannelId, newMessage);
            newMessage = string.Empty;
        }
        else
        {
            errorMessage = "Nie można wysłać pustej wiadomości lub brak wybranego kanału.";
        }
    }

    private async Task CreateNewChannel()
    {
        if (!string.IsNullOrWhiteSpace(newChannelName))
        {
            // Domyślnie tworzymy kanał projektowy w ramach aktualnego projektu użytkownika
            await ChatService.CreateChannel(newChannelName, "project", Guid.Parse(projectId));
            newChannelName = string.Empty;
        }
    }

    private void HandleLogout()
    {
        CustomAuthStateProvider.MarkUserAsLoggedOut();
        Navigation.NavigateTo("/login"); // Przekieruj do strony logowania
    }

    public async ValueTask DisposeAsync()
    {
        // Odsubskrybowanie zdarzeń, aby uniknąć wycieków pamięci
        ChatService.OnMessageReceived -= HandleMessageReceived;
        ChatService.OnTypingIndicator -= HandleTypingIndicator;
        ChatService.OnUserAddedToChannel -= HandleUserAddedToChannel;
        ChatService.OnChannelCreatedSuccessfully -= HandleChannelCreatedSuccessfully;
        ChatService.OnReceiveError -= HandleReceiveError;

        await ChatService.DisposeAsync();
    }
}
