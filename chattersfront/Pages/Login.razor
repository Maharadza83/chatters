@page "/login"
@layout PublicLayout
@inject AuthService AuthService
@inject NavigationManager Navigation
@using chattersfront.Models

<h3>Logowanie i Rejestracja</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<hr />
<div style="padding: 10px; border: 2px dashed blue; margin-bottom: 20px;">
    <h4>Krok Diagnostyczny 1:</h4>
    <p>Kliknij ten przycisk, aby przetestować samą nawigację.</p>
    <button class="btn btn-warning" @onclick='() => Navigation.NavigateTo("/test")'>PROSTY TEST NAWIGACJI</button>
</div>
<hr />


<div style="margin-bottom: 20px;">
    <h4>Krok Diagnostyczny 2:</h4>
    <p>Zaloguj się poprawnymi danymi. Aplikacja spróbuje przekierować Cię na stronę testową.</p>
    <input class="form-control" type="email" @bind="LoginRequest.Email" placeholder="Email" /><br />
    <input class="form-control" type="password" @bind="LoginRequest.Password" placeholder="Hasło" /><br />
    <button class="btn btn-primary" @onclick="HandleLogin">Zaloguj</button>
</div>

@code {
    private LoginRequest LoginRequest { get; set; } = new();
    private RegisterRequest RegisterRequest { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;

    private async Task HandleLogin()
    {
        ErrorMessage = string.Empty;
        var response = await AuthService.Login(LoginRequest);
        if (response != null)
        {
            // Zmieniamy cel na super-prostą stronę testową.
            Navigation.NavigateTo("/test"); 
        }
        else
        {
            ErrorMessage = "Logowanie nieudane. Sprawdź dane.";
        }
    }

    // Usunąłem sekcję rejestracji, aby uprościć widok na czas testów.
}